=== Reading and Writing Request & Response Headers in Ring
[role="byline"]
originally submitted by Adam Bard

==== Problem

You need to read or write HTTP request or response headers.

==== Solution

Read from the `:headers` key in a Ring request map, or `assoc` values
on to the response map before returning from a Ring handler function.

To follow along with this recipe, clone the _https://github.com/clojure-cookbook/ringtest_ repository and overwrite _src/ringtest.clj_.

._src/ringtest.clj_
[source, clojure]
----
(ns ringtest
  (:require
    [ring.adapter.jetty :as jetty]))

(defn user-agent-as-json
  "A handler that returns the User-agent header as a JSON
   response with an appropriate Content-Type"
  [req]
  {:body (str "{\"user-agent\": \"" (get-in req [:headers "user-agent"]) "\"}")
   :headers {"Content-Type" "application/json"}
   :status 200})

(defn -main []
  ;; Run the server on port 3000
  (jetty/run-jetty user-agent-as-json {:port 3000}))
----

==== Discussion

This example defines a Ring handler that returns the incoming
`User-Agent` header as a JSON response. It gets the `User-Agent` from
the request header map, and uses a `Content-Type` header in the response
to indicate to the client that it should be parsed as JSON.

Ring passes request headers as a `:headers` parameter in the request
map, and accepts a `:headers` parameter in response maps as well. The
keys and values of the headers map should both be strings - Clojure
keywords are not supported.

You can use Ring to set any header that is
http://en.wikipedia.org/wiki/List_of_HTTP_header_fields[valid in
HTTP].

According to http://www.ietf.org/rfc/rfc2616.txt[RFC-2616], header
names are _not_ case sensitive. To make it easier to consistently
`get` values from the request map, no matter what their case, Ring
passes in all header values as lower-case, regardless of what the
client sent. You may wish to _send_ headers using the actual
capitalization used in the specification, however, just in case the
client you're communicating with is not compliant (following the
classic robsutness principle; "be conservative in what you send, be
liberal in what you accept".)

==== See Also

* https://github.com/ring-clojure/ring/wiki/Concepts[Ring Concepts].
