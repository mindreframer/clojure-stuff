[[sec_primitives_strings_seq_of_chars]]
=== Treating a String as a Sequence of Characters
[role="byline"]
by Ryan Neufeld

==== Problem

You need to work with the individual characters in a string.(((strings, exposing characters in)))(((characters, exposing in strings)))

==== Solution

Use +seq+ on a string to expose the sequence of characters representing it:
(((functions, seq)))
[source,clojure]
----
(seq "Hello, world!")
;; -> (\H \e \l \l \o \, \space \w \o \r \l \d \!)
----

You don't need to call +seq+ every time you want to get at a string's
characters, though. Any function taking a sequence will naturally
coerce a string into a sequence of characters:

[source,clojure]
----
;; Count the occurrences of each character in a string.
(frequencies (clojure.string/lower-case "An adult all about A's"))
;; -> {\space 4, \a 5, \b 1, \d 1, \' 1, \l 3, \n 1, \o 1, \s 1, \t 2, \u 2}

;; Is every letter in a string capitalized?
(defn yelling? [s]
  (every? #(or (not (Character/isLetter %))
               (Character/isUpperCase %))
        s))

(yelling? "LOUD NOISES!")
;; -> true

(yelling? "Take a DEEP breath.")
;; -> false
----


==== Discussion

In computer science, "string" means "sequence of characters,"
and Clojure treats strings exactly as such. Because Clojure strings
are sequences under the covers, you may substitute a string anywhere a
collection is expected. When you do so, the string will be interpreted
as a collection of characters. There's nothing special about +(seq
string)+. The +seq+ function is merely returning a seq of the
collection of characters that make up the string.(((strings, definition of)))((("collections", "substituting strings for", seealso="composite data")))

More often than not, after you've done some work on the characters
within a string, you'll want to transform that collection back into a
string.(((characters, collapsing into strings))) Use +apply+ with +str+ on a collection of characters to
collapse them into a string:

[source,clojure]
----
(apply str [\H \e \l \l \o \, \space \w \o \r \l \d \!])
;; -> "Hello, world!"
----

==== See Also

* <<sec_primitives_building_strings_from_parts>>

* <<sec_primitives_converting_characters_integers>>
