[[sec_aot_compilation]]
=== AOT Compilation
[role="byline"]
by Luke VanderHart

==== Problem

You want to deliver your code as precompiled JVM bytecode in _.class_
files, rather than as Clojure source code.((("performance/production", "AOT (ahead of time) compilation")))((("AOT (ahead of time) compilation")))(((JVM bytecode)))

==== Solution

Use the +:aot+ (ahead of time) compilation key in your project's
_project.clj_ file to specify which namespaces should be compiled to
_.class_ files. The value of the +:aot+ key is a vector of either
symbols indicating specific namespaces to be compiled, or regular
expression literals specifying that any namespace with a matching name
should be compiled. Alternatively, instead of a vector, you can use the keyword +:all+ as
a value, which will AOT-compile every namespace in the project:

[source,clojure]
----
:aot [foo.bar foo.baz]

;; or...
:aot [#"foo\.b.+"] ; Compile all namespaces starting with "foo.b"

;; or...
:aot :all
----

Note that if your project has specified a +:main+ namespace, Leiningen
will AOT-compile it by default, regardless of whether it is present in an +:aot+
directive.

Once your project is configured for AOT compilation, you can compile it
by invoking *+lein compile+* at the command line. All emitted classes
will be placed in the _target/classes_ directory, unless you've
overridden the output directory with the +:target-path+ or
+:compile-path+ options.

==== Discussion

It's important to understand that AOT compilation does _not_ change
how the code actually runs. It's no faster or different. All Clojure
code is compiled to the same bytecode before execution; AOT
compilation merely means that it happens at a singular, defined point
in time instead of on demand as the program loads and runs.

However, although it isn't any faster, it can be a great tool in the
following situations:

- You want to deliver the application binary, but you don't want to
  include the original source code with it.
- To marginally speed up an application's start time (since the
  Clojure code won't have to be compiled on the fly).
- You need to generate classes loadable directly from Java for interop
  purposes.
- For platforms (such as Android) that do not support custom
  class loaders for running new bytecode at runtime.

You may observe that there is more than one emitted class file for
each AOT-compiled namespace. In fact, there will be separate Java
classes for each function, the namespace itself, and any additional
+gen-class+, +deftype+, or +defrecord+ forms. This is actually not
dissimilar from Java itself; it has always been the case that inner
classes are compiled to separate class files, and Clojure functions
are effectively anonymous inner classes from the JVM's point of view.

==== See Also

* Clojure's official documentation on
  http://clojure.org/compilation[AOT compilation]

* <<sec_packaging_jars>>