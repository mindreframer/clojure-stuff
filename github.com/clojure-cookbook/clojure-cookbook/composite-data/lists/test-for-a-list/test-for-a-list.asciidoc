=== Test For a List
[role="byline"]
by Steve Miner

==== Problem

You want to test if a value is a list.

==== Solution

The +list?+ function may seem like the obvious choice, but in most
cases it's better to use the more general +seq?+ function as your
test.

==== Discussion

The +list?+ function specifically tests if the argument implements
+clojure.lang.IPersistentList+, but in most cases you really want to
know if the value is a *seq* (implements +clojure.lang.ISeq+), which
is a more general abstraction than a list.

Not everything that prints as a *list* (in parentheses) actually
satisfies the +list?+ test. In practice, you'll often receive +Cons+
and +LazySeq+ values when manipulating lists. By focusing on the
fundamental *seq* abstraction, you don't need to worry about the
details of those concrete implementations.

[source,clojure]
----
;; A list constructed via list satisfies both list? and seq?
(list? (list 1 2 3))
;; -> true
(seq? (list 1 2 3))
;; -> true

;; cons, however *looks* like a list, but is actually a Cons...
(list? (cons 1 '(2 3)))
;; -> false
(type (cons 1 '(2 3)))
;; -> clojure.lang.Cons
(seq? (cons 1 '(2 3)))
;; -> true

;; range's lazy return value is a seq, but not a list
(list? (range 3))
;; -> false
(seq? (range 3))
;; -> true
(type (range 3))
;; -> clojure.lang.LazySeq
----

It's almost always better to use +seq?+ instead of +list?+.

==== See Also

* <<sec_creating_a_list>>
* <<sec_adding_to_a_list>>
* <<sec_test_collection_with_set>>

