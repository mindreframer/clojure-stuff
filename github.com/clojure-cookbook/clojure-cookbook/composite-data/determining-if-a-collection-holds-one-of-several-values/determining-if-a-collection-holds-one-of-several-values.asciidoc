[[sec_test_collection_with_set]]
=== Determining if a Collection Holds One of Several Values
[role="byline"]
by John Touron

==== Problem

You have a collection and want to determine if it holds one of several
possible values.

==== Solution

Use +some+, along with a set.

[source,clojure]
----
(some #{1 2} (range 10))
;; -> 1

(some #{10} (range 10))
;; -> nil
----

==== Discussion

Since sets can act like functions, they can be used as predicates,
testing whether the argument is a member of the set. This idiom will
test each item in a collection, returning either the first match, or
+nil+ if a match couldn't be found.

However, a problem arises when +nil+ or +false+ is a member of the set
you're using to test a collection with. Consider the following:

[source,clojure]
----
(if (some #{nil} [1 2 nil 3])
  ::found
  ::not-found)
;; -> :user/not-found

(if (some #{false} [1 2 false 3])
  ::found
  ::not-found)
;; -> :user/not-found
----

Because the +some+ function returns the *value* returned from the
predicate function, not just +true+ or +false+, using it with sets
that contain +nil+ or +false+ probably isn't what you want. It will
return +nil+ or +false if the item actually *is* in the set.

The simplest solution is to test for +nil+ or +false+ seperately,
using the +nil?+ or +false?+ predicate functions built in to Clojure.

[source,clojure]
----
(if (some nil? [nil false])
  ::found
  ::not-found)
;; -> :user/found

(if (some false? [nil false])
  ::found
  ::not-found)
;; -> :user/found
----

Or, to test both at once;

[source,clojure]
----
(if (some #(or (false? %)
               (nil? %))
      [nil false])
  ::found
  ::not-found)
;; -> :user/found
----

==== See Also

* <<sec_testing_set_membership>>
* <<sec_composite_retrieving_keys_map>>
