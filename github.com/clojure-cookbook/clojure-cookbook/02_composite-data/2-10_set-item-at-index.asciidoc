=== Setting the Value at an Index
[role="byline"]
by Luke VanderHart

==== Problem

Given a vector, you would like to obtain a new vector with a different
value at a particular index.(((vectors, setting value at index)))(((values, setting by index)))(((functions, assoc)))

==== Solution

Use +assoc+ to set the value at a particular index:

[source,clojure]
----
(assoc [:a :b :c ] 1 :x)
;; -> [:a :x :c]
----

+assoc+ can also be used to set multiple indexes at the same time, by
providing additional index/value pairs:

[source,clojure]
----
(assoc [:a :b :c ] 1 :x 2 :y)
;; -> [:a :x :y]
----

==== Discussion

As you may have noticed, +assoc+ is the same function used to set the
values of keys in a map. This is because vectors, like maps, are
associative and implement the same interface
(+clojure.lang.Associative+), which is what +assoc+ uses under the
hood.((("Clojure", "clojure.lang.Associative")))

Unlike with maps, however, the keys used when using +assoc+ on a vector
must be integer indexes within the range of the vector. Attempting to
use a noninteger key will cause an +IllegalArgumentException+, and
attempting to +assoc+ an index greater than the size of the vector will throw 
an +IndexOutOfBoundsException+.(((exceptions/errors, IllegalArgumentException)))(((exceptions/errors, IndexOutOfBoundsException)))

Note that it _is_ possible to +assoc+ to an index equal to the current size 
of the vector (one greater than the maximum index). This will have 
the result of appending the item to the end.(((range="endofrange", startref="ix_CDvect")))

==== See Also

* <<sec_adding_to_a_vector>>
* <<sec_composite_data_maps_setting_keys>>
