[[sec_composites_as_keys]]
=== Using Composite Values as Map Keys
[role="byline"]
by Luke VanderHart

==== Problem

You'd like to use a value that isn't a simple primitive type as a(((maps, using composite key values)))(((keys, using composite values for)))
lookup key in a map. For example:

* You'd like to use geographic or Cartesian coordinates as map keys.
* You'd like to associate values with functions.

==== Solution

Because of its robust identity semantics on composite values, Clojure
fully supports using any immutable value as a map key. More
importantly, doing so is reasonably efficient.

For example, consider the data structure to represent a chessboard,
an 8 &#x00D7; 8 grid where each position can have one of six possible types of
piece. Rows are represented by the numbers 1&#x2013;8, and columns by the
letters _a&#x2013;h_.

In Clojure, you can represent this directly as a map:

[source,clojure]
----
(def chessboard {[:a 5] [:white :king]
                 [:a 4] [:white :pawn]
                 [:d 4] [:black :king]})
----

Moving a piece then requires two operations, pass:[<literal>dissoc</literal>]-ing the old
position for a piece and pass:[<literal>assoc</literal>]-ing the new position:

[source,clojure]
----
(defn move
  "Given a map representing a chessboard, move the piece at src
  to dest"
  [board source dest]
  (-> board
      (dissoc source)
      (assoc dest (board source))))

(move chessboard [:a 5] [:a 4])
;; -> {[:d 4] [:black :king]
;;     [:a 4] [:white :king]}
----

As another example of nontraditional map keys, consider the
situation where you have a set of functions, and you want to be able
to assign them each a "weighting" and multiply the return value by the
corresponding weight whenever the function is called.(((maps, nontraditional keys for)))(((keys, nontraditional)))

An easy way to do this is to store the functions and weights in a map,
with the functions as keys:

// TODO: This sample for apply-weighted is a little convoluted.

[source,clojure]
----
(def plus-two (partial + 2))
(def plus-three (partial + 3))
(def weight-map {plus-two 1.0
                 plus-three 0.8})
----

Then you can use a simple wrapper function to apply the functions
with the weights applied:

[source,clojure]
----
(defn apply-weighted
  "Given a weight map, a function, and args, applies the function
  to the args, multiplying the result by the weighting for the
  function. If the weight map does not specify a weight for the
  function, a default of 1.0 is used."
  [weight-map f & args]
  (* (get weight-map f 1.0)
     (apply f args)))

(apply-weighted weight-map plus-two 2)
;; -> 4.0

(apply-weighted weight-map plus-three 1)
;; -> 3.2
----

==== Discussion

A more traditional way to model the chess game would be with a
two-dimensional array, or, in Clojure's case, with a vector of
vectors.

This is certainly a reasonable thing to do, and is (possibly) slightly
more performant. However, it is a less clean model of the actual
problem domain. It requires a translation, for example, from chess's
row/column numbers and letters to zero-indexed indexes. Using a map
lets you store the positions directly, in native chess terminology.

Similarly, there are alternative implementations for the
function-weighting example. It could be implemented using a +cond+
statement with all the functions and weights enumerated, or by
replacing the functions altogether with a protocol method that could
then have varying implementations with different weights.

However, storing the functions and weights in a map has the benefit of
making it obvious at a glance what the weightings for particular
functions are. More importantly, it is possible to store multiple
different sets of weights, and switch between different weight schemes
dynamically at runtime.

==== See Also

* <<sec_composite_retrieving_keys_map>>, and <<sec_composite_data_maps_setting_keys>>
