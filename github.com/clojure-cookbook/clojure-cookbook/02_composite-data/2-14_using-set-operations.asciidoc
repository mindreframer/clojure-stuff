[[sec_set_operations]]
=== Using Set Operations
[role="byline"]
by Luke VanderHart

==== Problem

You want to perform common operations on sets, such as taking the union,
intersection, or difference of two sets, or you want to test if one set is a subset or superset of another.(((sets, common operations on)))(((sets, testing for subsets)))

==== Solution

All these functions are available in the +clojure.set+ namespace,
which is built into Clojure.(((functions, union)))((("Clojure", "clojure.set/union")))

+union+ takes any number of sets as arguments and returns a set
containing their union (i.e., a set containing all the elements from all the
sets):

[source,clojure]
----
(clojure.set/union #{:red :white} #{:white :blue} #{:blue :green})
;; -> #{:white :red :blue :green}
----

+intersection+ also takes any number of sets as args and returns(((functions, intersection)))((("Clojure", "clojure.set/intersection")))
their intersection (a set consisting only of the items shared by all
the argument sets):

++++
<?hard-pagebreak?>
++++

[source,clojure]
----
(clojure.set/intersection #{:red :white :blue}
                          #{:red :blue :green}
                          #{:yellow :blue :red})
;; -> #{:red :blue}
----

+difference+ takes a set as its first argument and returns it without(((functions, difference)))((("Clojure", "clojure.set/difference")))
elements from the sets given in the additional arguments:

[source,clojure]
----
(clojure.set/difference #{:red :white :blue :yellow}
                        #{:red :blue}
                        #{:white})
;; -> #{:yellow}
----

+subset?+ returns +true+ if and only if the first argument is a subset((("Clojure", "clojure.set/subset")))
of the second (that is, if every member of the first set is also a
member of the second):

[source,clojure]
----
(clojure.set/subset? #{:blue :white}
                     #{:red :white :blue})
;; -> true

(clojure.set/subset? #{:blue :black}
                     #{:red :white :blue})
;; -> false
----

+superset?+ works the same way, except it returns +true+ only if the
first set is a _superset_ of the second.((("Clojure", "clojure.set/superset")))

As you may have noticed, +superset?+ is actually identical to
+subset?+, only with the order of the arguments reversed.

==== Discussion

In general, you should try to use these set manipulation functions
wherever they are applicable. Sets represent a sizable portion of the
data most developers work with day to day, whether they are recognized
and explicitly modeled as sets or not.

There are a large number of bugs that can be caused by assumptions
regarding the behaviors of collections. In programming, the type of
data structure used for a given purpose is actually a _communication_,
from the initial writer of the code to future programmers, that tells a number of things about the nature of the collection. Sets are
_unordered, unique_ collections--they emphasize that the important
fact is whether an item is a member of the set, not the order or
number of occurrences.

If your data does represent a logical set, then model it using set
data structures, and try to think about manipulating it in terms of
set operations. In many cases, you will find that this makes your
program substantially easier to reason about, and makes it more
self-documenting regarding the source and intended use of the data it
contains.(((range="endofrange", startref="ix_CDset")))

==== See Also

* <<sec_testing_set_membership>>
* <<sec_test_collection_with_set>>
