=== Introduction

Storing data in a database is not an uncommon task for developers--in
this day and age, it's practically a given. As with nearly every language
under the sun, there is a bevy of drivers and clients to interact
with databases from Clojure. What sets Clojure apart, however, is its
ability to _compose_.(((Clojure, benefits of)))

As we've said before in this book: in Clojure, data is king. You'll
find many of the database client libraries do a little legwork to
connect you to the datastore, then promptly get out of your way.
Such libraries don't do so out of laziness (at least, we
hope), but rather out of the principle of separation of concerns: _I'll handle connecting
to the database; you handle the domain (your data)_. In fact, the best
APIs are built out of data, providing only one or two functions and
letting you manipulate queries and data to be inserted directly as
Clojure data structures.

In this chapter, we'll visit a wide number of databases and
techniques, including the SQLs, full-text search, Mongo, Redis, and
Datomic.

http://www.datomic.com/[Datomic] is one of the more interesting recent developments in the
database landscape. Invented and maintained by Rich Hickey (who
you will probably recognize as the same person who wrote Clojure
itself), it is a scalable, transactional, value-oriented, time-aware
database built around the same principles and philosophies as
Clojure. If you like Clojure, you should definitely give Datomic a
try, both as your application's datastore and also as a learning
tool to further explore functional, data-oriented programming.(((databases, Datomic)))((("Hickey, Rich")))(((Datomic database, basics of)))

++++
<?hard-pagebreak?>
++++

