[[sec_local_io_json]]
=== Reading and Writing JSON Data
[role="byline"]
by Stefan Karlsson

==== Problem

You need to read or write JSON data.

==== Solution

Use the +clojure.data.json/read-str+ function to read a string of JSON
as Clojure data.

[source,clojure]
----
(require '[clojure.data.json :as json])

(json/read-str "[{\"name\":\"Stefan\",\"age\":32}]")
;; -> [{"name" "Stefan", "age" 32}]
----

To write data back to JSON, use the +clojure.data.json/write-str+
function with the original Clojure data.

[source,clojure]
----
(json/write-str [{"name" "Stefan", "age" 32}])
;; -> "[{\"name\":\"Stefan\",\"age\":32}]"
----

==== Discussion

Beyond reading and writing strings, +clojure.data.json+ also provides
the +read+ and +write+ functions to work with +java.io.Reader+ and
+java.io.Writer+ objects, respectively. With the exception of their
+reader+/+writer+ parameters, these two functions share the
same parameters and options as their string-brethren.

[source,clojure]
----
(with-open [writer (clojure.java.io/writer "foo.json")]
  (json/write [{:foo "bar"}] writer))


(with-open [reader (clojure.java.io/reader "foo.json")]
  (json/read reader))
;; -> [{"foo" "bar"}]
----
        
By virtue of JavaScript's simpler types, JSON notation has a much
lower fidelity than Clojure data. As such, you may find you want to tweak
the way keys or values are interpreted.

One common example of this is converting JSON's string-only keys to
proper Clojure keywords. You can apply a function to each processed
key by using the +:key-fn+ option.

[source,clojure]
----
;; Modifying keys on read

(json/read-str "{\"name\": \"Stefan\"}")
;; -> {"name" "Stefan"}

(json/read-str "{\"name\": \"Stefan\"}" :key-fn keyword)
;; -> {:name "Stefan"}

;; Modifying keys on write

(json/write-str {:name "Stefan"})
;; -> "{\"name\":\"Stefan\"}"

(json/write-str {:name "Stefan"} :key-fn str)
;; -> "{\":name\":\"Stefan\"}" ; Note the extra \:
----

You may also want to control how values are interpeted. Use the
+:value-fn+ option to specify how values is read/written. The function
you provide will be invoked with two arguments; a key and its value.

[source,clojure]
----
;; Properly read UUID values
(defn str->uuid [key value]
  (if (= key :uuid)
    (java.util.UUID/fromString value)
    value))

(clojure.data.json/read-str
  "{\"name\": \"Stefan\", \"uuid\": \"51674ca0-eadc-4a5b-b9fb-67b05d5a71b7\"}"
  :key-fn keyword
  :value-fn str->uuid)
;; -> {:name "Stefan", :uuid #uuid "51674ca0-eadc-4a5b-b9fb-67b05d5a71b7"}

;; And similarly, write UUID values
(defn uuid->str [key value]
  (if (= key :uuid)
    (str value)
    value))

(clojure.data.json/write-str
  {:name "Stefan", :uuid #uuid "51674ca0-eadc-4a5b-b9fb-67b05d5a71b7"}
	:value-fn uuid->str)
;; -> "{\"name\":\"Stefan\",\"uuid\":\"51674ca0-eadc-4a5b-b9fb-67b05d5a71b7\"}"
----

As you may have inferred, when you use provide both a +:key-fn+ and
+:value-fn+, the value function will always be called after the key
function.

It might go without saying, but the +:key-fn+ and +:value-fn+ options
can also be used with the +write+ and +read+ functions.

==== See Also

* <<sec_local_io_clojure_data_to_disk>> for information on
  reading/writing +edn+ (Clojure) data.
* The http://clojure.github.io/data.json/[API docs] for
  +clojure.data.json+ for more information on read/write's. Options
  not covered in this recipe include +:eof-error?+, +:eof-value+ and
  +:bigdec+ on +read+ and  +:escape-unicode+ and +:escape-slash+ on +write+.
