[[sec_read_write_xml]]
=== Working with XML Data
[role="byline"]
by Stefan Karlsson

==== Problem

You need to read or write XML data.

==== Solution
Pass a file to +clojure.xml/parse+ to get a Clojure map representing the structure of an XML file.

For example, when reading the following file:

._simple.xml_
[source,xml]
----
<simple>
  <item id="1">First</item>
  <item id="2">Second</item>
</simple>
----

[source,clojure]
----
(require '[clojure.xml :as xml])
(clojure.xml/parse (clojure.java.io/file "simple.xml"))
;; -> {:tag :simple, :attrs nil, :content [
;;    {:tag :item, :attrs {:id "1"}, :content ["First"]} 
;;    {:tag :item, :attrs {:id "2"}, :content ["Second"]}]}
----

If you want to read an XML as a sequence of nodes, pass the XML map to the +xml-seq+
function from the +clojure.core+ namespace.

[source,clojure]
----
(xml/xml-seq (clojure.xml/parse (clojure.java.io/file "simple.xml")))
----

+xml-seq+ returns a tree sequence of nodes; that is, a sequence of
each node, starting at the root and then doing a depth-first walk of
the rest of the document.

To write an XML file, pass an XML structure map to
+clojure.xml/emit+. +emit+ spits the XML to the currently bound output
stream (+*out*+), so to write to a file either bind +*out*+ to the
file's output stream, or capture the output stream to a string with the
+with-out-str+ macro, which you can then +spit+ to a file:

[source,clojure]
----
(spit "test.xml" (with-out-str (clojure.xml/emit simple-xml-map)))
----

==== Discussion

To work with XML you can handle it as any other map. Here is an
example of a function that, given an id and a file, will parse the
file for nodes with an attribute id that is equal to the argument.

[source,clojure]
----
(defn get-with-id [id xml-file]
  (for [node (xml-seq (clojure.xml/parse xml-file))
        :when (= (get-in node [:attrs :id]) id)]
    (:content node)))

(get-with-id "2" simple-xml)

;; -> (["Second"])
----

To modify XML, just use the normal map manipulation functions on the
Clojure data representation.

Additionally, if you are going to work a lot with your XML structure
you might consider using a "zipper". A zipper is a purely functional
data structure useful for navigating and modifying tree-like
structures (such as XML) in a convenient and efficient way.

Zippers are a deep topic, and a full discussion is beyond the scope of
this recipe, but see the documentation for the +clojure.data.zip+
library for explanation and examples of how to use them effectively
with XML.

==== See also

* <<sec_local-io_read_write_files>>
* The http://richhickey.github.io/clojure/clojure.zip-api.html[+clojure.zip+] namespace.


