[[sec_avoid_null]]
=== Avoiding Null-Pointer Exceptions with +core.typed+
[role="byline"]
by Ambrose Bonnaire-Sergeant

==== Problem

You want to verify that your code handles `nil` correctly, eliminating
potential null-pointer exceptions.

==== Solution

Use +core.typed+, an optional type system for Clojure, to annotate and
check a namespace for misuses of `nil`.

To follow along with this recipe, create a file _core_typed_samples.clj_
and start a REPL using +lein-try+:

[source,shell]
----
$ touch core_typed_samples.clj
$ lein try org.clojure/core.typed
----

[NOTE]
====
This recipe is a little different than others because +core.typed+ uses
on-disk files to check namespaces.
====

Consider, for example, that you are writing a function +handle-number+
to process numbers. To verify +handle-number+ handles +nil+ correctly
annotate it with +clojure.core.typed/ann+ to accept the union (+U+) of the +nil+ and
+Number+ types, returning a +Number+. 

._core_typed_samples.clj_
[source,clojure]
-----
(ns core-typed-samples
  (:require [clojure.core.typed :refer [ann] :as t]))

(ann handle-number [(U nil Number) -> Number])
(defn handle-number [a]
  (+ a 20))
-----

Verify the function's correctness at the REPL using +clojure.core.typed/check-ns+.

[source,clojure]
----
user=> (require '[clojure.core.typed :as t])
user=> (t/check-ns 'core-typed-samples)
# ...
Type Error (core-typed-samples:6:3) Static method clojure.lang.Numbers/add
could not be applied to arguments:


Domains:
        t/AnyInteger t/AnyInteger
        java.lang.Number java.lang.Number

Arguments:
        (U nil java.lang.Number) (Value 20)

Ranges:
        t/AnyInteger
        java.lang.Number

with expected type:
        java.lang.Number

in: (clojure.lang.Numbers/add a 20)
in: (clojure.lang.Numbers/add a 20)



ExceptionInfo Type Checker: Found 1 error  clojure.core/ex-info (core.clj:4327)
----

The current definition is unsafe, +check-ns+ recognizes that `+` can
only handle numbers, while the +handle-number+ function accepts
numbers *or* +nil+.

Protect the call to `+` by wrapping it in an +if+ statement, returning
+0+ in the absence of +a+.

._core_typed_samples.clj_
[source,clojure]
----
(ns core-typed-samples
  (:require [clojure.core.typed :refer [ann] :as t]))

(ann handle-number [(U nil Number) -> Number])
(defn handle-number [a]
  (if a
    (+ a 20)
    0))
----

Check the namespace with +check-ns+ again.

[source,clojure]
----
user=> (t/check-ns 'core-typed-samples)
# ...
:ok
-----

Now that there is no way +nil+ could accidentally be passed to `+` by this
code, a null-pointer exception is impossible.

==== Discussion

+core.typed+ is designed to avoid all misuses of +nil+ or +null+ in
typed code. To achieve this, the concepts of the null-pointer and
reference types are separated. This is unlike Java, where a type like
+java.lang.Number+ implies a "nullable" type.

In +core.typed+, reference types are implicitly non-nullable. To express
a nullable type (such as in the example above) construct a _union
type_ of the desired type and +nil+. For example, a +java.lang.Number+
in +core.typed+ syntax is non-nullable; the union type +(U nil
java.lang.Number)+ expresses the equivalent to a nullable
+java.lang.Number+ (the latter is closest to what +java.lang.Number+
implies in Java type syntax).

This separation of concepts allows +core.typed+ to throw a _type error_
on any potential misuse of +nil+. The solution above threw a type
error when type checking the equivalent expression: ++(+ nil 20)++.

To better understand +core.typed+ type errors, it is useful to note that
some functions have _inline_ definitions. +core.typed+ fully expands all
code before type checking, so it is common to see calls to the Java
method +clojure.lang.Numbers/add+ in type errors when user code
invokes `clojure.core/+`.

It is also common to see _ordered intersection function types_ in type
errors. Our first type error claims that the arguments +(U Number
nil)+ and +(Value 20)+ are not under either of the ordered
intersection function domains, listed under "Domains". Notice two
"Ranges" are provided, which correspond to the listed domains.

The full type of +clojure.lang.Numbers/add+ is:

[source,clojure]
----
(Fn [t/AnyInteger t/AnyInteger -> t/AnyInteger]
    [Number Number -> Number])
----

Briefly, the function is "ordered" because it tries to match the
argument types with each arity until one matches.

==== See also

* https://github.com/clojure/core.typed[+core.typed+ Home]
* http://clojure.github.io/core.typed/[+core.typed+ API Reference]
* The list of core type aliases in the API reference. For example, the
  entry for
  http://clojure.github.io/core.typed/#clojure.core.typed/AnyInteger[clojure.core.typed/AnyInteger].
* Valid types are documented on the
  https://github.com/clojure/core.typed/wiki/Types[Types] wiki page.
* Recipes <<sec_verify_java> and <<sec_verify_hof>> for further
  examples of how to use +core.typed+.
