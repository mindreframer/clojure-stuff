[[sec_primitives_dates_reader_literal]]
=== Representing Dates as Literals
[role="byline"]
by Ryan Neufeld

==== Problem

You need represent instances of time in a readable and serializable form.

==== Solution

Use Clojure's +#inst+ literals in source to represent fixed points in
time.

[source,clojure]
----
(def ryans-birthday #inst "1987-02-18T18:00:00.000-00:00")

(println ryans-birthday)
;; *out*
;; #inst "1987-02-18T18:00:00.000-00:00"
----

When communicating with other Clojure processes (or anything else that
speaks https://github.com/edn-format/edn[edn]) use +clojure.edn/read+
to reify instant literal strings into Date objects.

[source,clojure]
----
;; A faux communication channel that "receives" edn strings
(require 'clojure.edn)
(import '[java.io PushbackReader StringReader])

(defn remote-server-receive-date []
  (-> "#inst \"1987-02-18T18:00:00.000-00:00\""
      (StringReader.)
      (PushbackReader.)))

(clojure.edn/read (remote-server-receive-date))
;; -> #inst "1987-02-18T18:00:00.000-00:00"
----

In the above example +remote-server-receive-date+ emulates a
communications channel upon which you may receive edn data.

==== Discussion

Since Clojure 1.4 instants in time have been represented via
the +#inst+ reader literal. This means dates are no longer represented
by code that must be evaluated, but a textual representation that is both
consistent and serializable. This standard allows any process capable
of communicating in edn, or "extensible data notation" of speaking
clearly about instants of time. See the
https://github.com/edn-format/edn/wiki/Implementations[edn
implementations list] for a list of languages that speak edn; the list
includes Clojure, Ruby and JavaScript so far, with many more
implementations in the works.

.+clojure.core/read+ vs. +clojure.edn/read+
****
While it may *seem* convenient to read strings using Clojure's
built-in reader (+clojure.core/read+), it is NEVER safe to parse input
from an untrusted source using this reader. If you need to receive
simple Clojure data from an external source it is best to use the edn
reader (+clojure.edn/read+).

+clojure.core/read+ isn't safe, because it was only designed for
reading Clojure data and strings from trusted source (such as the
source files you write). +clojure.edn/read+ is designed specifically
for use as part of a communication channel, and as such is built with
security in mind.
****

It's also possible to vary how the reader evaluate +#inst+ literals
by changing the binding of *+data-readers+*. By varying the binding of
*+data-readers+* it is possible to reader +#inst+ literals as
+java.util.Calendar+ or +java.util.Timestamp+ if you so desire.

[source,clojure]
----
(def instant "#inst \"1987-02-18T18:00:00.000-00:00\"")

(binding [*data-readers* {'inst clojure.instant/read-instant-calendar}]
  (class (read-string instant)))
;; -> java.util.GregorianCalendar

(binding [*data-readers* {'inst clojure.instant/read-instant-timestamp}]
  (class (read-string instant)))
;; -> java.sql.Timestamp
----

==== See Also

* <<sec_primitives_math_uuids>> for another example of a reader
  literal included with Clojure.

