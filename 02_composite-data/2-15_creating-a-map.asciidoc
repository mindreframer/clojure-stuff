=== Creating a Map
[role="byline"]
by Luke VanderHart

==== Problem

You want to create an association that maps keys to values. You
possibly want to maintain a specific ordering of keys.((("composite data", "maps", id="ix_CDmap", range="startofrange")))(((maps, creating)))((("{ } (curly braces)")))(((maps, literals)))(((values, mapping keys to)))(((keys, maintaining order of)))

==== Solution

Use map literals (curly braces) with alternating keys and values to
create simple maps:

[source,clojure]
----
{:name ""
 :class :barbarian
 :race :half-orc
 :level 20
 :skills [:bashing :hacking :smashing]}
----

Keys and values can be any type. Commas may be used to delimit
key/value pairs where the structure would be hard to discern at a
glance:

[source,clojure]
----
{1 1, 8 64, 2 4, 9 81}
----

TIP: In Clojure, commas are whitespace, which means that they can be
used _anywhere_ in a form with no effect on the value; it is just one
way to make your code easier to read.(((whitespace, commas as)))((("commas, as whitespace")))

Create an empty, unsorted map with a pair of braces: +{}+.

Create specific types of maps with map constructor(((maps, map constructor functions)))(((functions, array-map)))(((functions, hash-map)))(((functions, sorted-map)))
functions. +array-map+, +hash-map+, and +sorted-map+ each return a map
of the corresponding type:

[source,clojure]
----
(array-map)
;; -> {}

(sorted-map :key1 "val1" :key2 "val2")
;; -> {:key1 "val1" :key2 "val2"}
----

If a key occurs multiple times in the argument list, the last value
will be that used in the final return map.(((maps, creating sorted)))

Use +sorted-map-by+ to create a sorted map using a custom comparator:

[source,clojure]
----
(sorted-map-by #(< (count %1) (count %2))
               "pigs" 14
               "horses" 2
               "elephants" 1
               "manatees" 3)
;; -> {"pigs" 14, "horses" 2, "manatees" 3, "elephants" 1}
----

==== Discussion

Clojure maps can have one of three distinct concrete implementations:

Array maps, +clojure.lang.PersistentArrayMap+::
These are backed by a simple array. They are efficient for very small maps, but not for larger sizes.(((arrays, array maps)))((("Clojure", "clojure.lang.PersistentArrayMap")))

Hash maps, +clojure.lang.PersistentHashMap+::
These are backed by a hash table data structure. Hash tables support near constant-time lookup and insertion, but also require a certain amount of overhead space, using up slightly more heap space.((("Clojure", "clojure.lang.PersistentHashMap")))(((hash maps)))

Sorted maps, +clojure.lang.PersistentTreeMap+::
These are backed by a balanced red-black binary tree. They are more space-efficient than hash maps, but have slower insertion and access times.((("Clojure", "clojure.lang.PersistentTreeMap")))(((sorted maps)))

Array maps are the default implementation for small maps (under 10
entries at the time of writing), and hash maps are the default for
larger ones. Sorted maps can only be created by explicitly invoking
the +sorted-map+ or +sorted-map-by+ functions.(((functions, sorted-map)))(((functions, sorted-map-by)))

Using +assoc+ or +conj+ on a sorted map will always yield another
sorted map. However, +assoc+-ing onto an array map will yield a hash
map once it reaches a certain size. The inverse is not true; using
+dissoc+ on a hash map will not yield an array map, even if it becomes
very small.(((functions, assoc)))(((functions, conj)))(((functions, dissoc)))

==== See Also

* <<sec_primitives_dates_comparing>>, and <<sec_primitives_numbers_fuzzy_comparison>>, to see more uses for +compare+
* <<sec_composite_creating_sets>>
* <<sec_composite_data_maps_setting_keys>>
* <<sec_composite_sorting>>

++++
<?hard-pagebreak?>
++++
