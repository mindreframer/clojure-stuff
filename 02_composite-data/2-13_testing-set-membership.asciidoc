[[sec_testing_set_membership]]
=== Testing Set Membership
[role="byline"]
by Luke VanderHart

==== Problem

You want to check if an item is a member of a set.(((sets, testing membership of)))((("functions", "contains?")))

==== Solution

The easiest way to check a single item is with the +contains?+
function, which takes a set and an item and returns +true+ if the item
is a member of the set:

[source,clojure]
----
(def my-set #{:red :white :green})
(contains? my-set :blue)
;; -> false

(contains? my-set :green)
;; -> true
----

The +get+ function also works with sets and does basically the same(((functions, get)))
thing, except instead of returning +true+ or +false+, it returns the
value itself if it is a member, or +nil+ if it is not:

[source,clojure]
----
(get my-set :blue)
;; -> nil

(get my-set :green)
;; -> :green
----

If desired, you can also pass a third argument to be used as the default return value instead
of +nil+ if a set doesn't contain the value:

[source,clojure]
----
(get my-set :blue :no-such-luck)
;; -> :no-such-luck

(get my-set :green :no-such-luck)
;; -> :green
----

Finally, sets are also functions. When you invoke them with a single
argument, they work just like +get+, returning the argument if it is a
member, and +nil+ otherwise:

[source,clojure]
----
(my-set :blue)
;; -> nil

(my-set :green)
;; -> :green
----

Note as well that keywords behave in the same manner for sets as they(((keywords, sets and)))
do with maps. Thus, the following is equivalent to having used +get+:

[source,clojure]
----
(:blue my-set)
;; -> nil

(:green my-set)
;; -> :green
----

Note that, when using a set as a function, one cannot specify a second argument
as a default value:

[source,clojure]
----
(my-set :blue :no-such-luck)
ArityException Wrong number of args (2) passed to: PersistentHashSet  clojure.lang.AFn.throwArity (AFn.java:429)
----

However, you can add a default value when using a keyword as a function with a set as the first argument:

[source,clojure]
----
(:blue my-set :no-such-luck)
;; -> :no-such-luck

user=> (:green  my-set :no-such-luck)
;; -> :green
----

==== Discussion

The choice between +contains?+ and +get+ is mainly an aesthetic one.
However, if your set might contain +nil+ as an actual value you care
about, you'll definitely need to use +contains?+, since a +nil+ return
from +get+ wouldn't tell you anything in that case.

The ability to use a set as a function is interesting, but it's(((sets, using as a function)))(((filtering)))
especially useful when you want to use it as a predicate function on a
sequence operation. For example, it's fairly common to want to filter
a sequence to only contain items in a set. In this case, using the set
itself is both easy and idiomatic:

[source,clojure]
----
(take 10
  (filter #{1 2 3}
          (repeatedly #(rand-int 10))))
;; -> (2 1 2 3 2 2 1 2 2 1)
----

This snippet first creates an infinite lazy sequence consisting of
random numbers between 1 and 10, using +repeatedly+ to call
+rand-int+ (wrapped in an anonymous function) over and over. Then it
feeds this sequence through a filter, with a set of the numbers 1&#x2013;3
as the filter predicate.

The result is another infinite lazy sequence, but containing only
members of the predicate set.

This example is contrived. However, using sets as predicate functions
is an extremely useful technique that that pops up quite frequently in Clojure projects.

==== See Also

* <<sec_set_operations>>
* <<sec_composite_retrieving_keys_map>>
