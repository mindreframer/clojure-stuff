=== Building a RESTful Application with Liberator
[role="byline"]
by Eric Normand

==== Problem

You want to build a RESTful (RFC-2616 compliant) web application on top of Ring and
Compojure at a higher level of abstraction, by defining resources.

==== Solution

Use https://github.com/clojure-liberator/liberator[Liberator] to
create HTTP-compliant, RESTful web apps.

To follow along with this recipe, create a new project using the command *+lein new liberator-test+*.

Inside your _project.clj_, add the following dependencies to your +:dependencies+ key:

[source, clojure]
----
[compojure "1.0.2"]
[ring/ring-jetty-adapter "1.1.0"]
[liberator "0.9.0"]
----

Then, modify _src/liberator_test/core.clj_ to match the following contents:

._src/liberator_test/core.clj_
[source, clojure]
----
(ns liberator-test.core
  (:require [compojure.core :refer [defroutes ANY]]
            [ring.adapter.jetty :as jetty]
            [liberator.core :refer [defresource]]))

;; Resources

(defresource root
   :available-media-types #{"text/plain"})

; Routing
(defroutes main-routes
  (ANY "/" [] root))

; Server
(defn -main []
 (jetty/run-jetty main-routes {:port 3000}))
----

==== Discussion

https://github.com/clojure-liberator/liberator[Liberator] is a library
for developing HTTP-compliant web servers. It handles content
negotiation, status codes, and standard request methods on RESTful
resources. It decides what status to respond using a decision tree
which follows the HTTP Spec.

Liberator does not handle routing, so another library needs to be
used. In this recipe, Compojure was used. Since Liberator does a
better job handling the request method (GET, PUT, POST, etc.), you
should use `ANY` in your Compojure routes. You could also use a
different routing library such as
https://github.com/weavejester/clout[Clout],
https://github.com/cgrand/moustache[Moustache], or the
https://github.com/ericnormand/playnice[playnice] router.

The `defresource` form defines a web resource, which is modeled as a
Ring handler. You can therefore pass the resource as the last argument
to Compojure routes.

Liberator resources are set up with sensible defaults. The default for
the available media types is the empty set, so it needs to be set to
something, otherwise Liberator will return a `406 Not Acceptable`
response. In this recipe it is set to respond with `text/plain` as the
MIME type. The default response is "OK", which you will see if you run
the recipe and point a browser at http://localhost:3000.

==== See Also

* <<sec_webapps_ring_introduction>> for information on setting up
  Ring.
* <<sec_webapps_compojure_compojure>> for more information on
  Compojure routes.
* Liberator's http://clojure-liberator.github.io/liberator/[Homepage].
