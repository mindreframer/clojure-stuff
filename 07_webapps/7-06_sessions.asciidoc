=== Storing Sessions with Ring
[role="byline"]
by Adam Bard

==== Problem

You need to store secure data about a logged-in user as state on the
server.(((Ring library, storing sessions with)))((("sessions, storage of")))(((data, secure storage of)))(((security issues, session storage)))

==== Solution

Use `ring.middleware.session/wrap-session` to add sessions to your
Ring application.

To follow along with this recipe, clone the https://github.com/clojure-cookbook/ringtest repository and overwrite _src/ringtest.clj_:

[source, clojure]
----
(ns ringtest
  (:require
    [ring.adapter.jetty :as jetty]
    [ring.middleware.session :refer [wrap-session]]
    [ring.middleware.params :refer [wrap-params]]))

(def login-form
  (str
    "<html>"
    "  <form action='' method='post'>"
    "    Username: <input type='text' name='username'><br/>"
    "    Password: <input type='text' name='password'><br/>"
    "    <input type='submit' value='Log In'>"
    "  </form>"
    "</html>"))

(defn show-form []
  {:body login-form
   :status 200 })

(defn show-name
  "A response showing that we know the user's name"
  [name session]
  {:body (str "Hello, " name)
   :status 200
   :session session })

(defn do-login
  "Check the submitted form data and update the session if necessary"
  [params session]
  (if (and (= (params "username") "jim")
           (= (params "password") "password"))
    (assoc session :user "jim")
    session))


(defn handler
  "Log a user in, or not"
  [{session :session params :form-params :as req}]
  (let [session (do-login params session)
        username (:user session)]

    (if username
      (show-name username session)
      (show-form))))

(def wrapped-handler
  (-> handler
      wrap-session
      wrap-params))

(defn -main []
  ;; Run the server on port 3000
  (jetty/run-jetty wrapped-handler {:port 3000}))
----

==== Discussion

http://bit.ly/ring-sessions[Ring's session
middleware] has an API similar to the cookies API. You get session data from the
`:session` request map, and set it by including a `:session` key in
the response map. Whatever you pass to `:session` is up to you, but
usually you'll want to use a map to store keys and values.

Behind the scenes, Ring sets a cookie called `ring-session`, which contains a unique
ID identifying the session. When a request comes in, the session middleware gets the
session ID from the request, then reads the value of the session from some session store.

Which session store the middleware uses is configurable. The default
is to use an in-memory session store, which is useful for development
but has the side effect of losing sessions whenever you restart the
app. Ring includes an encrypted cookie store as well, which _is_
persistent, and you can get third-party libraries for many popular
storages, including
http://bit.ly/ring-session-memcached[Memcached] and
https://github.com/wuzhe/clj-redis-session[Redis]. You can write your
own, too, to store your sessions in any database.

You can set your store by passing an options map with a `:store`
parameter to `wrap-session`:

[source, clojure]
----
(wrap-session handler {:store (my-store)}))
----

To set the value of `:session`, just pass it along with your response. If you don't
need the session changed,  leave `:session` out of your response. If you want to actually clear the
session, pass `nil` as the value of the `:session` key.

==== See Also

* <<sec_ring_middleware>>
* Ring's http://bit.ly/ring-sessions[sessions documentation]
