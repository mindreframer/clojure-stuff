=== Generating Random Numbers
[role="byline"]
by Ryan Neufeld

==== Problem

You need to generate a random number.(((numeric types, random number generation)))(((random numbers)))(((functions, rand)))(((functions, rand-int)))(((numbers, random)))

==== Solution

Clojure makes available a number of pseudorandom number generating functions for your disposal.(((integers, generating random)))

For generating random floating-point numbers from +0.0+ up to (but not including) +1.0+, use +rand+:

[source, clojure]
----
(rand)
;; -> 0.0249306187447903

(rand)
;; -> 0.9242089829055088
----

For generating random integers, use +rand-int+:

[source, clojure]
----
;; Emulating a six-sided die
(defn roll-d6 []
  (inc (rand-int 6)))

(roll-d6)
;; -> 1

(roll-d6)
;; -> 3
----

==== Discussion

In addition to generating a number from +0.0+ to +1.0+, +rand+ also
accepts an optional argument that specifies the exclusive maximum
value. For example, +(rand 5)+ would return a floating-point number
ranging from +0.0+ (inclusive) to +5.0+ (exclusive).

+(rand-int 5)+, on the other hand, would return a random _integer_ between +0+
(inclusive) and +5+ (exclusive). At first blush, +rand-int+ might seem like an
ideal way to select a random element from a vector or list. This is a lot of
ceremony, though. Use +rand-nth+ instead to get a random element from any((("functions", "rand-nth")))(((lists, selecting random elements from)))
sequential collection (i.e., the collection responds to +nth+):

[source,clojure]
----
(rand-nth [1 2 3])
;; -> 1

(rand-nth '(:a :b :c))
;; -> :c
----

This won't work for sets or hash maps, however. If you want to retrieve(((sets, selecting random elements from)))
a random element from a nonsequential collection like a set, use
+seq+ to transform that collection into a sequence before calling
+rand-nth+ on it:

[source,clojure]
----
(rand-nth (seq #{:heads :tails}))
;; -> :heads
----

If you're trying to randomly sort a collection, use +shuffle+ to
receive a random permutation of your collection:

[source,clojure]
----
(shuffle [1 2 3 4 5 6])
;; -> [3 1 4 5 2 6]
----

==== See Also

* The
  http://bit.ly/javadoc-random[API
  documentation] for +java.util.Random+

* <<sec_testing_generative>>