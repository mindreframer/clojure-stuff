[[sec_primitives_dates_reader_literal]]
=== Representing Dates as Literals
[role="byline"]
by Ryan Neufeld

==== Problem

You need to represent instances of time in a readable and serializable form.((("dates/times", "representing as literals")))((("#inst literals")))

==== Solution

Use Clojure's +#inst+ literals in source to represent fixed points in
time:

[source,clojure]
----
(def ryans-birthday #inst "1987-02-18T18:00:00.000-00:00")

(println ryans-birthday)
;; *out*
;; #inst "1987-02-18T18:00:00.000-00:00"
----

When communicating with other Clojure processes (or anything else that
speaks https://github.com/edn-format/edn[edn]), use +clojure.edn/read+
to reify instant literal strings into +Date+ objects:

[source,clojure]
----
;; A faux communication channel that "receives" edn strings
(require 'clojure.edn)
(import '[java.io PushbackReader StringReader])

(defn remote-server-receive-date []
  (-> "#inst \"1987-02-18T18:00:00.000-00:00\""
      (StringReader.)
      (PushbackReader.)))

(clojure.edn/read (remote-server-receive-date))
;; -> #inst "1987-02-18T18:00:00.000-00:00"
----

In the preceding example, +remote-server-receive-date+ emulates a
communication channel upon which you may receive edn data.

==== Discussion

Since Clojure 1.4, instants in time have been represented via
the +#inst+ reader literal. This means dates are no longer represented
by code that must be evaluated, but instead have a textual representation that is both
consistent and serializable. This standard allows any process capable
of communicating in extensible data notation to speak
clearly about instants of time. See the
http://bit.ly/edn-impls[edn
implementations list] for a list of languages that speak edn; the list
includes Clojure, Ruby, and JavaScript so far, with many more
implementations in the works.(((reader literals)))((("extensible data notation (edn)", "date expression in")))

.clojure.core/read Versus clojure.edn/read
****
While it may _seem_ convenient to read strings using Clojure's
built-in reader (+clojure.core/read+), it is _never_ safe to parse input
from an untrusted source using this reader. If you need to receive
simple Clojure data from an external source, it is best to use the edn
reader (+clojure.edn/read+).((("functions", "clojure.edn/read")))((("functions", "clojure.core/read")))

+clojure.core/read+ isn't safe because it was only designed for
reading Clojure data and strings from trusted sources (such as the
source files you write). +clojure.edn/read+ is designed specifically
for use as part of a communication channel, and as such is built with
security in mind.(((security issues, built-in string reader)))(((strings, edn vs. core readers for)))
****

It's also possible to vary how the reader evaluates +#inst+ literals
by changing the binding of pass:[<literal>*data-readers*</literal>]. By varying the binding of
pass:[<literal>*data-readers*</literal>], it is possible to read +#inst+ literals as
http://bit.ly/javadoc-calendar[+java.util.Calendar+] or http://bit.ly/javadoc-timestamp[+java.sql.Timestamp+], if you so desire:

[source,clojure]
----
(def instant "#inst \"1987-02-18T18:00:00.000-00:00\"")

(binding [*data-readers* {'inst clojure.instant/read-instant-calendar}]
  (class (read-string instant)))
;; -> java.util.GregorianCalendar

(binding [*data-readers* {'inst clojure.instant/read-instant-timestamp}]
  (class (read-string instant)))
;; -> java.sql.Timestamp
----

==== See Also

* <<sec_primitives_math_uuids>>, for another example of a reader
  literal included with Clojure