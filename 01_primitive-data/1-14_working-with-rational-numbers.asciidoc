[[sec_primitives_rational_numbers]]
=== Working with Rational Numbers
[role="byline"]
by Ryan Neufeld

==== Problem

You need to manipulate fractional numbers with absolute precision.(((numeric types, rational numbers)))(((fractional numbers)))(((rational numbers)))
(((integers, maintaining precision in)))(((functions, rationalize)))(((numbers, fractional)))(((numbers, rational)))

==== Solution

When manipulating integers (or other rationals), you can expect to maintain precision, including recurring fractions like 1/3 (0.333...):

[source,clojure]
----
(/ 1 3)
;; -> 1/3

(type (/ 1 3))
;; -> clojure.lang.Ratio

(* 3 (/ 1 3))
;; -> 1N
----

Use +rationalize+ on pass:[<literal>double</literal>s] to coerce them to rationals to avoid losing precision:

[source,clojure]
----
(+ (/ 1 3) 0.3)
;; -> 0.6333333333333333

(rationalize 0.3)
;; -> 3/10

(+ (/ 1 3) (rationalize 0.3))
;; -> 19/30
----

==== Discussion

Clojure does its best to help you retain accuracy when working with
numbers, especially integers. When dividing integers, Clojure maintains
accuracy by expressing the quotient as an accurate ratio
of integers instead of a lossy +double+. This accuracy isn't without a
cost, though; operations on rational numbers are much slower than
operations on simpler types. As is discussed in
<<sec_primitives_math_arbitrary_precision>>, accuracy is always a
trade-off for performance, and is something you need to consider given
the problem at hand.

When operating on both pass:[<literal>double</literal>s] and rationals at the same time, care is
advised; on account of the way type contagion works in Clojure,
performing an operation over both types will cause the rational number
to be coerced to a +double+. This transition isn't necessarily inaccurate
for a single operation, but the change in type introduces the
possibility for inaccuracy to creep in.(((double values)))(((values, doubles)))

To maintain accuracy when working with pass:[<literal>double</literal>s], use the +rationalize+
function. This function returns the rational value of any number. Calling +rationalize+ on any values that might possibly be pass:[<literal>double</literal>s] will allow you to maintain absolute accuracy (at the cost of performance).

==== See Also

* <<sec_primitives_math_arbitrary_precision>>