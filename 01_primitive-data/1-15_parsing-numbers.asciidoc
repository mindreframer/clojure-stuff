[[sec_primitives_numbers_parsing_numbers]]
=== Parsing Numbers
[role="byline"]
by Ryan Neufeld

==== Problem

You need to parse numbers out of strings.(((numeric types, parsing)))(((parsing, numbers out of strings)))(((strings, parsing numbers out of)))(((numbers, parsing out of strings)))
((("functions", "Integer/parseInt")))

==== Solution

For "normal&#8221;-sized large or precise numbers, use +Integer/parseInt+ or
+Double/parseDouble+ to parse them:

[source,clojure]
----
(Integer/parseInt "-42")
;; -> -42

(Double/parseDouble "3.14")
;; -> 3.14
----

==== Discussion

What is a "normal&#8221;-sized number? For +Integer/parseInt+, normal is anything below
+Integer/MAX_VALUE+ (2147483647); and for +Double/parseDouble+, it's anything below
pass:[<phrase role='keep-together'><literal>Double/MAX_VALUE</literal></phrase>] (around 1.79 &#x00D7; 10^308).((functions, bigdec)))(((functions, bigint)))(((BigInteger type)))(((BigDecimal type)))

When the numbers you are parsing are either abnormally large or
abnormally precise, you'll need to parse them with +BigInteger+
or +BigDecimal+ to avoid losing precision. The versatile +bigint+ and
+bigdec+ functions can coerce strings (or any other numerical types, for
that matter) into infinite-precision containers:

[source,clojure]
----
(bigdec "3.141592653589793238462643383279502884197")
;; -> 3.141592653589793238462643383279502884197M

(bigint "122333444455555666666777777788888888999999999")
;; -> 122333444455555666666777777788888888999999999N
----

==== See Also

* The API documentation for http://bit.ly/javadoc-parseInt[+Integer/parseInt+] and http://bit.ly/javadoc-parseDouble[+Double/parseDouble+]